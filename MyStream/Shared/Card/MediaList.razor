@inherits ComponenteCore<MediaList>
@inject HttpClient Http

<Card Margin="Margin.Is3.FromBottom">
    <CardHeader Padding="Padding.Is2">
        @CardHeader
        <Select TValue="int" SelectedValue="@MediaCount" Float="Float.Right" Size="Size.ExtraSmall" Style="width:auto;" SelectedValueChanged="MediaCountChanged">
            <SelectItem Value="12">12</SelectItem>
            <SelectItem Value="24">24</SelectItem>
            <SelectItem Value="36">36</SelectItem>
            <SelectItem Value="1000">All</SelectItem>
        </Select>
    </CardHeader>
    <CardBody Padding="Padding.Is2">
        <Row Gutter="(8,8)">
            @if (listMedia.Any())
            {
                @foreach (var item in listMedia.Take(MediaCount))
                {
                    <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is4.OnMobile">
                        <Card Margin="Margin.Is0" Style="display:block; text-align:center;">
                            <Blazorise.Link Clicked="@(() => PopupMovie.ShowModal(item, Language, TypeMedia))" Style="cursor: pointer;">
                                @if (ShowOnlyYear)
                                {
                                    <Badge Color="Color.Light" Style="font-size: 10px; position: absolute; top: 115px; left: 5px;">@item.release_date?.Year</Badge>
                                }
                                else
                                {
                                    <Badge Color="Color.Light" Style="font-size: 10px; position: absolute; top: 115px; left: 5px;">@item.release_date?.ToShortDateString()</Badge>
                                }

                                @if (item.rating >= 8)
                                {
                                    <Badge Color="Color.Success" Style="font-size: 10px; position: absolute; top: 5px; right: 5px;">@item.rating</Badge>
                                }
                                else if (item.rating >= 6)
                                {
                                    <Badge Color="Color.Warning" Style="font-size: 10px; position: absolute; top: 5px; right: 5px;">@item.rating</Badge>
                                }
                                else if (item.rating > 0)
                                {
                                    <Badge Color="Color.Danger" Style="font-size: 10px; position: absolute; top: 5px; right: 5px;">@item.rating</Badge>
                                }

                                @if (string.IsNullOrEmpty(item.poster_path_92))
                                {
                                    <Blazorise.Icon Name="FontAwesomeIcons.Image" Class="fa-4x mt-3 mb-5" Style="opacity: 0.5"></Blazorise.Icon>
                                }
                                else
                                {
                                    <CardImage Source="@item.poster_path_92" Alt="Poster"></CardImage>
                                }
                            </Blazorise.Link>
                            <CardBody Padding="Padding.Is1">
                                <CardTitle Size="6" Style="font-size: 0.8rem; min-height: 45.6px;" Margin="Margin.Is1.FromBottom">
                                    @item.title
                                </CardTitle>
                            </CardBody>
                        </Card>
                    </Column>
                }
            }
            else
            {
                <Alert Color="Color.Primary" Visible="true" Margin="Margin.Is0.FromBottom">
                    <AlertDescription>
                        <Blazorise.Icon Name="FontAwesomeIcons.ExclamationTriangle"></Blazorise.Icon> Não há dados para mostrar
                    </AlertDescription>
                </Alert>
            }
        </Row>
    </CardBody>
</Card>

<PopupMovie @ref="PopupMovie" Http="@Http"></PopupMovie>

@code {
    public PopupMovie PopupMovie { get; set; }

    [Parameter]
    public MyStream.Services.IMediaListService Service { get; set; }

    [Parameter]
    public string CardHeader { get; set; }

    [Parameter]
    public string Region { get; set; }

    [Parameter]
    public string Language { get; set; }

    [Parameter]
    public bool ShowOnlyYear { get; set; } = true;

    [Parameter]
    public TypeMedia TypeMedia { get; set; }

    public int MediaCount { get; set; } = 12;

    public List<MyStream.Modal.Media> listMedia { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData(Region, Language);
    }

    public async Task LoadData(string Region, string Language)
    {
        listMedia = await Service.GetListMedia(Http, SessionStorage, Region, Language);
    }

    protected async Task MediaCountChanged(int value)
    {
        if (!MediaCount.Equals(value))
        {
            MediaCount = value;

            if (listMedia.Count <= 20) //first call has only 20 records
            {
                listMedia.AddRange(await Service.GetListMedia(Http, SessionStorage, Region, Language, 2));
            }
        }
    }
}