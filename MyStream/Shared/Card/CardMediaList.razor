@inherits ComponenteCore

<Card Margin="Margin.Is3.FromBottom">
    <CardHeader Padding="Padding.Is2">
        @CardHeader
        <RadioGroup TValue="int" CheckedValue="MediaCount" Buttons="true" Float="Float.Right" Class="btn-group-xs" CheckedValueChanged="MediaCountChanged">
            <Radio TValue="int" Value="0">1</Radio>
            <Radio TValue="int" Value="12">2</Radio>
            <Radio TValue="int" Value="24">3</Radio>
            <Radio TValue="int" Value="36">4</Radio>
        </RadioGroup>
    </CardHeader>
    <CardBody Padding="Padding.Is2">
        @if (Options.HasCustomVisibility)
        {
            <CustomVisibility Options="Options"></CustomVisibility>
        }
        else
        {
            <Row Gutter="(8,8)">
                <Repeater Items="@ListMedia" Skip="MediaCount" Take="@(MediaCount+12)">
                    <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is4.OnMobile">
                        <Card Margin="Margin.Is0" Style="display:block; text-align:center;">
                            <Blazorise.Link Clicked="@(() => OpenPopupMedia(context))" Style="cursor: pointer;">
                                @if (ShowOnlyYear)
                                {
                                    <Badge Color="Color.Light" Style="font-size: 10px; position: absolute; top: 5px; left: 5px;">@context.release_date?.Year</Badge>
                                }
                                else
                                {
                                    <Badge Color="Color.Light" Style="font-size: 10px; position: absolute; top: 5px; left: 5px;">@context.release_date?.ToShortDateString()</Badge>
                                }

                                @if (context.rating >= 8)
                                {
                                    <Badge Color="Color.Success" Style="font-size: 10px; position: absolute; top: 5px; right: 5px;">@context.rating</Badge>
                                }
                                else if (context.rating >= 6)
                                {
                                    <Badge Color="Color.Warning" Style="font-size: 10px; position: absolute; top: 5px; right: 5px;">@context.rating</Badge>
                                }
                                else if (context.rating > 0)
                                {
                                    <Badge Color="Color.Danger" Style="font-size: 10px; position: absolute; top: 5px; right: 5px;">@context.rating</Badge>
                                }

                                @if (string.IsNullOrEmpty(context.poster_path_small))
                                {
                                    <Blazorise.Icon Name="FontAwesomeIcons.Image" Class="fa-4x mt-3 mb-5" Style="opacity: 0.5"></Blazorise.Icon>
                                }
                                else
                                {
                                    <CardImage Source="@context.poster_path_small" Alt="Poster"></CardImage>
                                }
                            </Blazorise.Link>
                            <CardBody Padding="Padding.Is1">
                                <CardTitle Size="6" Style="font-size: 0.8rem; min-height: 30.6px;" Margin="Margin.Is1.FromBottom">
                                    @context.title
                                </CardTitle>
                            </CardBody>
                        </Card>
                    </Column>
                </Repeater>
            </Row>
        }
    </CardBody>
</Card>

<PopupMedia @ref="PopupMedia" ServiceDetail="@(new Services.TMDB.MediaDetailService())" ServiceProviders="@(new Services.TMDB.WatchProvidersService())"></PopupMedia>

@code {
    public PopupMedia PopupMedia { get; set; }

    [Parameter]
    public string CardHeader { get; set; }

    [Parameter]
    public Services.IMediaListService Service { get; set; }

    public Dictionary<string, object> ExtraParameters { get; set; } = null;

    [Parameter]
    public bool ShowOnlyYear { get; set; } = true;

    [Parameter]
    public bool FindExternalId { get; set; } = false;

    public List<MediaDetail> ListMedia { get; set; }

    public int MediaCount { get; set; } = 0;

    public int ApiCalls { get; set; } = 0;

    private VisibilityOptions Options => new VisibilityOptions
    {
        Loading = ListMedia == null || IsLoading
    };

    public async Task LoadData(Settings settings, Dictionary<string, object> ExtraParameters = null)
    {
        ApiCalls = 0;
        ListMedia = new();
        this.ExtraParameters = ExtraParameters;

        IsLoading = true;
        while (ListMedia.Count < MediaCount + 12)
        {
            ApiCalls++;
            ListMedia.AddRange(await Service.GetListMedia(Http, SessionStorage, settings, ApiCalls, ExtraParameters));

            if (ApiCalls > 3) break;
        }
        IsLoading = false;

        StateHasChanged();
    }

    protected async Task MediaCountChanged(int value)
    {
        if (!MediaCount.Equals(value))
        {
            MediaCount = value;

            IsLoading = true;
            while (ListMedia.Count < MediaCount + 12)
            {
                ApiCalls++;
                ListMedia.AddRange(await Service.GetListMedia(Http, SessionStorage, Settings, ApiCalls, ExtraParameters));

                if (ApiCalls > 3) break;
            }
            IsLoading = false;
        }
    }

    private async Task OpenPopupMedia(MyStream.Modal.MediaDetail media)
    {
        var tmdb_id = "";

        if (FindExternalId) //for now, only tv series (imdb) need this kind of workaround
        {
            var service = new MyStream.Services.TmdbExternalIdTvService();
            tmdb_id = await service.GetTmdbId(Http, SessionStorage, Settings, media.tmdb_id);
        }
        else
        {
            tmdb_id = media.tmdb_id;
        }

        await PopupMedia.ShowModal(tmdb_id, media.TypeMedia);
    }
}