@inherits ComponenteCore
@inject IStringLocalizer<App> L
@inject ProviderServide ProviderServide
@inject Settings Settings
@using MyStream.Modal.Enum

<Modal @ref="modal">
    <ModalContent Centered="true" Size="ModalSize.Small">
        <ModalHeader>
            <ModalTitle>Filter</ModalTitle>
            <CloseButton Clicked="HideModal" />
        </ModalHeader>
        <ModalBody MaxHeight="70">
            <Field>
                <FieldLabel>@L["MediaTypes"]</FieldLabel>
                <Select TValue="MediaType?" @bind-SelectedValue="@MediaType">
                    <SelectItem TValue="MediaType?"></SelectItem>
                    @foreach (var item in EnumHelper.GetList<MediaType>())
                    {
                        <SelectItem Value="@item.ValueObject">@item.Name</SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel>@L["DeliveryModel"]</FieldLabel>
                <Select TValue="DeliveryModel?" @bind-SelectedValue="@DeliveryModel">
                    <SelectItem TValue="DeliveryModel?"></SelectItem>
                    @foreach (var item in EnumHelper.GetList<DeliveryModel>())
                    {
                        <SelectItem Value="@item.ValueObject">@item.Name</SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel>Name or Description</FieldLabel>
                <TextEdit @bind-Text="Content"></TextEdit>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">@L["OK"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal modal;

    [Parameter]
    public MediaType? MediaType { get; set; } = MyStream.Modal.Enum.MediaType.movie;

    [Parameter]
    public EventCallback<MediaType?> MediaTypeChanged { get; set; }

    [Parameter]
    public DeliveryModel? DeliveryModel { get; set; }

    [Parameter]
    public EventCallback<DeliveryModel?> DeliveryModelChanged { get; set; }

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public EventCallback<string> ContentChanged { get; set; }

    public async Task ShowModal()
    {
        modal.Show();
    }

    public async Task HideModal()
    {
        modal.Hide();

        await MediaTypeChanged.InvokeAsync(MediaType);
        await DeliveryModelChanged.InvokeAsync(DeliveryModel);
        await ContentChanged.InvokeAsync(Content);
    }
}