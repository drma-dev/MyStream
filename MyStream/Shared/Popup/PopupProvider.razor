@inherits ComponenteCore
@inject IStringLocalizer<App> L
@inject Settings Settings
@using MyStream.Modal.Enum
@using MyStream.Modal

<Modal @ref="modal">
    <ModalContent Centered="true" Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>@provider.name</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody MaxHeight="70">
            <Row Margin="Margin.Is2.FromBottom" Gutter="(8, 8)">
                <Column ColumnSize="ColumnSize.IsAuto">
                    @if (string.IsNullOrEmpty(provider.logo_path))
                    {
                        //generic logo path
                    }
                    else
                    {
                        <Image Source="@("https://www.themoviedb.org/t/p/original/" + provider.logo_path)" Text="@provider.name"></Image>
                    }
                </Column>
                <Column>
                    <Row Gutter="(8, 8)">
                        <Column ColumnSize="ColumnSize.IsAuto">
                            <Button Color="Color.Secondary" Clicked="@(() => PopupCatalog.ShowModal(provider, Settings, MediaType))">
                                <Blazorise.Icon Name="FontAwesomeIcons.List"></Blazorise.Icon> @L["Catalog"]
                            </Button>
                        </Column>
                        <Column ColumnSize="ColumnSize.IsAuto">
                            <Button Color="Color.Secondary" Disabled="true">
                                <Blazorise.Icon Name="FontAwesomeIcons.Search"></Blazorise.Icon> @L["Search"]
                            </Button>
                        </Column>
                    </Row>
                </Column>
            </Row>
            <Paragraph Alignment="TextAlignment.Justified" Margin="Margin.Is2.FromBottom">
                @*document.querySelector('meta[name="description"]').content*@
                @provider.description
            </Paragraph>
            <Divider DividerType="DividerType.TextContent" Text="@L["MediaTypes"]" />
            @foreach (var item in provider.types)
            {
                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromRight">@item.GetName()</Badge>
            }
            <Divider DividerType="DividerType.TextContent" Text="@L["Regions"]" />
            @foreach (var item in provider.regions)
            {
                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromRight" title="@item.GetName()" Style="cursor: help;">@item</Badge>
            }
            <Divider DividerType="DividerType.TextContent" Text="@L["DeliveryModel"]" />
            @foreach (var item in provider.models)
            {
                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromRight" title="@item.GetDescription()" Style="cursor: help;">
                    @item.GetName() <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle"></Blazorise.Icon>
                </Badge>
            }
            @if (provider.models.Any(a => a == DeliveryModel.SVOD))
            {
                <Divider DividerType="DividerType.TextContent" Text="@L["Plans"]" />
                @if (provider.plans.Any())
                {
                    @foreach (var item in provider.plans)
                    {
                        <Badge Color="Color.Secondary" Margin="Margin.Is1.FromRight">@item.name: @item.price.ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture(provider.head_language))</Badge>
                    }
                }
                else
                {
                    <Badge Color="Color.Danger">@L["NotFound"]</Badge>
                }
            }
        </ModalBody>
        <ModalFooter Style="justify-content: space-between;">
            @if (string.IsNullOrEmpty(provider.link))
            {
                <a href="@("https://www.google.com/search?q=streaming+" + provider.name)" target="_blank" rel="noopener" style="float: left;">search on google</a>
            }
            else
            {
                <a href="@provider.link" target="_blank" rel="noopener" style="float: left;">@(new Uri(provider.link).Host)</a>
            }
            <Button Color="Color.Secondary" Clicked="@modal.Hide">@L["Close"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<PopupCatalog @ref="PopupCatalog"></PopupCatalog>

@code {
    public PopupCatalog PopupCatalog { get; set; }

    private Modal modal;

    public Provider provider { get; set; } = new();

    public MediaType MediaType { get; set; }

    public void ShowModal(MyStream.Modal.Provider provider, MediaType MediaType)
    {
        this.provider = provider;
        this.MediaType = MediaType;

        modal.Show();
    }
}