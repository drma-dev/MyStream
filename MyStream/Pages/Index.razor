@page "/"
@page "/Index"
@inherits ComponenteCore
@using System.Linq
@using MyStream.Core
@using MyStream.Modal
@using MyStream.Modal.Enum
@inject IStringLocalizer<App> L
@inject ProviderServide ProviderServide

<Fields>
    <Field ColumnSize="ColumnSize.IsAuto">
        <Select TValue="MediaType" @bind-SelectedValue="@MediaType" Style="width: auto;">
            @foreach (var item in EnumHelper.GetList(typeof(MediaType)))
            {
                <SelectItem Value="@item.ValueObject">@item.Name</SelectItem>
            }
        </Select>
    </Field>
    <Field ColumnSize="ColumnSize.IsAuto">
        <Select TValue="DeliveryModel?" @bind-SelectedValue="@DeliveryModel" Style="width: auto;">
            <SelectItem TValue="MediaType?"></SelectItem>
            @foreach (var item in EnumHelper.GetList(typeof(DeliveryModel)))
            {
                <SelectItem Value="@item.ValueObject">@item.Name</SelectItem>
            }
        </Select>
    </Field>
</Fields>

<Card Margin="Margin.Is3.FromBottom">
    <CardHeader Padding="Padding.Is2">
        @L["Providers"] (@Settings?.Region)
        <RadioGroup TValue="int" @bind-CheckedValue="MovieProviderCount" Buttons="true" Float="Float.Right" Class="btn-group-xs">
            <Radio TValue="int" Value="48">48</Radio>
            <Radio TValue="int" Value="1000">@L["All"]</Radio>
        </RadioGroup>
    </CardHeader>
    <CardBody Padding="Padding.Is2">
        @if (Options.HasCustomVisibility)
        {
            <CustomVisibility Options="Options"></CustomVisibility>
        }
        else
        {
            <Row Gutter="(8,8)">
                @foreach (var item in GetFilteredProviders(MediaType, DeliveryModel))
                {
                    <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                        <Button Color="Color.Primary" Outline="true" Block="true" Padding="Padding.Is1" Clicked="@(() => PopupProvider.ShowModal(item, MediaType))">
                            <Image Source="@("https://www.themoviedb.org/t/p/original/" + item.logo_path)" Text="@item.name" Class="w-100"></Image>
                            @*@if (string.IsNullOrEmpty(item.link))
                                {<p class="m-0" style="color: red">link</p>}*@
                            @*@if (string.IsNullOrEmpty(item.description))
                                {<p class="m-0" style="color: red">description</p>}*@
                            @if (!item.models.Any())
                            {<p class="m-0" style="color: red">model</p>}
                            @*@if (item.models.Any(a => a == MyStream.Modal.Enum.DeliveryModel.SVOD) && !item.plans.Any())
                                {<p class="m-0" style="color: red">plan</p>}*@
                        </Button>
                    </Column>
                }
            </Row>
        }
    </CardBody>
</Card>

<PopupProvider @ref="PopupProvider"></PopupProvider>

@code {
    public PopupProvider PopupProvider { get; set; }

    public MediaType MediaType { get; set; } = MediaType.movie;
    public DeliveryModel? DeliveryModel { get; set; }

    public int MovieProviderCount { get; set; } = 48;
    public int TVProviderCount { get; set; } = 48;

    private List<Provider> AllProviders = new();

    public IEnumerable<Provider> GetFilteredProviders(MediaType? MediaType, DeliveryModel? DeliveryModel) => AllProviders
        .Where(PredicateBuilder.True<Provider>()
            .And(p => p.regions.Any(a => a == Settings.Region))
            .And(p => p.types.Any(a => a == MediaType.Value))
            .And(p => DeliveryModel.HasValue ? p.models.Any(a => a == DeliveryModel.Value) : true)
        .Compile()).Take(MovieProviderCount);

    private VisibilityOptions Options => new VisibilityOptions
    {
        Loading = IsLoading,
        NoData = !IsLoading && !AllProviders.Any()
    };

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        base.OnInitialized();

        RefreshCore.RegionChanged = new EventCallbackFactory().Create(this, (Region value) => Settings.Region = value);

        await LoadProviders(Settings.Region);

        IsLoading = false;
    }

    private async Task LoadProviders(Region region)
    {
        AllProviders = await ProviderServide.GetAllProviders(Http, StorageService.Local);
    }
}